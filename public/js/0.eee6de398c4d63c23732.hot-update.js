webpackHotUpdate(0,{

/***/ 415:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_moment__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_moment__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  data() {\n    return {\n      purchase_order_menu: false,\n      dataset: [],\n      labels: {\n        xLabels: [],\n        yLabels: 5,\n        yLabelsTextFormatter: val => \"$\" + Math.round(val * 100) / 100\n      },\n      grid: {\n        verticalLines: true,\n        verticalLinesNumber: 1,\n        horizontalLines: true,\n        horizontalLinesNumber: 1\n      }\n    };\n  },\n  mounted() {\n\n    this.$http.get(\"https://api.coindesk.com/v1/bpi/historical/close.json?start=2019-01-01&end=2019-01-31\").then(res => {\n      const data = res.data.bpi;\n      for (let key in data) {\n        this.dataset.push(data[key]);\n        this.labels.xLabels.push(__WEBPACK_IMPORTED_MODULE_0_moment___default()(key).format(\"MM/DD\"));\n      }\n    });\n\n    document.addEventListener('click', this.close);\n  },\n  methods: {\n    initPopper() {\n      const chart = document.querySelector(\".random-chart\");\n      const ref = chart.querySelector(\".active-line\");\n      const tooltip = this.$refs.tooltip;\n      this.popper = new Popper(ref, tooltip, {\n        placement: \"right\",\n        modifiers: {\n          offset: { offset: \"0,10\" },\n          preventOverflow: {\n            boundariesElement: chart\n          }\n        }\n      });\n    },\n    onMouseMove(params) {\n      this.popperIsActive = !!params;\n      this.popper.scheduleUpdate();\n      this.tooltipData = params || null;\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL2Rhc2hib2FyZC9TYWxlc0NoYXJ0LnZ1ZT8zMDBhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQURBO0FBRUEsaUJBRkE7QUFHQTtBQUNBLG1CQURBO0FBRUEsa0JBRkE7QUFHQTtBQUhBLE9BSEE7QUFRQTtBQUNBLDJCQURBO0FBRUEsOEJBRkE7QUFHQSw2QkFIQTtBQUlBO0FBSkE7QUFSQTtBQWVBLEdBakJBO0FBa0JBOztBQUlBLGVBQ0EsR0FEQSxDQUVBLHVGQUZBLEVBSUEsSUFKQSxDQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBVkE7O0FBYUE7QUFFQSxHQXJDQTtBQXNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFEQTtBQUVBO0FBQ0Esb0NBREE7QUFFQTtBQUNBO0FBREE7QUFGQTtBQUZBO0FBU0EsS0FkQTtBQWVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFuQkE7QUF0Q0EiLCJmaWxlIjoiNDE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuXG48c2VjdGlvbj5cblxuIFxuXG4gIDxkaXYgY2xhc3M9XCJiaXRjb2luLXByaWNlXCI+XG4gICAgPHN2ZyBzdHlsZT1cIndpZHRoOjA7IGhlaWdodDowOyBwb3NpdGlvbjphYnNvbHV0ZTtcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiPlxuICAgICAgPGRlZnM+XG4gICAgICAgIDxsaW5lYXJHcmFkaWVudCBpZD1cImJ0Y0ZpbGxcIiB4MT1cIjFcIiB4Mj1cIjFcIiB5MT1cIjBcIiB5Mj1cIjFcIj5cbiAgICAgICAgICA8c3RvcCBvZmZzZXQ9XCIwJVwiIHN0b3AtY29sb3I9XCIjZjY5MTE5XCI+PC9zdG9wPlxuICAgICAgICAgIDxzdG9wIG9mZnNldD1cIjEwMCVcIiBzdG9wLWNvbG9yPVwiI2ZmZmZmZlwiPjwvc3RvcD5cbiAgICAgICAgPC9saW5lYXJHcmFkaWVudD5cbiAgICAgIDwvZGVmcz5cbiAgICA8L3N2Zz5cbiAgICA8dHJlbmQtY2hhcnRcbiAgICAgIHYtaWY9XCJkYXRhc2V0Lmxlbmd0aFwiXG4gICAgICA6ZGF0YXNldHM9XCJbe2RhdGE6IGRhdGFzZXQsIGZpbGw6IGZhbHNlLCBjbGFzc05hbWU6ICdjdXJ2ZS1idGMnfV1cIlxuICAgICAgOmxhYmVscz1cImxhYmVsc1wiXG4gICAgICA6bWluPVwiMFwiXG4gICAgICA6Z3JpZD1cImdyaWRcIlxuICAgICAgOmludGVyYWN0aXZlPXRydWVcbiAgICAgIDpzaG93UG9pbnRzPXRydWVcbiAgICAvPlxuXG5cbiAgICA8ZGl2IGlkPVwicG9wXCIgcm9sZT1cInRvb2x0aXBcIiByZWY9XCJ0b29sdGlwXCIgY2xhc3M9XCJ0b29sdGlwXCIgOmNsYXNzPVwieydpcy1hY3RpdmUnOiB0b29sdGlwRGF0YX1cIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0b29sdGlwLWNvbnRhaW5lclwiIHYtaWY9XCJ0b29sdGlwRGF0YVwiPlxuICAgICAgICA8c3Ryb25nPnt7bGFiZWxzLnhMYWJlbHNbdG9vbHRpcERhdGEuaW5kZXhdfX08L3N0cm9uZz5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRvb2x0aXAtZGF0YVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b29sdGlwLWRhdGEtaXRlbSB0b29sdGlwLWRhdGEtaXRlbS0tMVwiPnt7dG9vbHRpcERhdGEuZGF0YVswXX19PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRvb2x0aXAtZGF0YS1pdGVtIHRvb2x0aXAtZGF0YS1pdGVtLS0yXCI+e3t0b29sdGlwRGF0YS5kYXRhWzFdfX08L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9vbHRpcC1kYXRhLWl0ZW0gdG9vbHRpcC1kYXRhLWl0ZW0tLTNcIj57e3Rvb2x0aXBEYXRhLmRhdGFbMl19fTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuXG5cblxuICA8L2Rpdj5cblxuICA8L3NlY3Rpb24+XG5cblxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgbW9tZW50IGZyb20gXCJtb21lbnRcIlxuZXhwb3J0IGRlZmF1bHQge1xuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwdXJjaGFzZV9vcmRlcl9tZW51OmZhbHNlLFxuICAgICAgZGF0YXNldDogW10sXG4gICAgICBsYWJlbHM6IHtcbiAgICAgICAgeExhYmVsczogW10sXG4gICAgICAgIHlMYWJlbHM6IDUsXG4gICAgICAgIHlMYWJlbHNUZXh0Rm9ybWF0dGVyOiB2YWwgPT4gXCIkXCIgKyBNYXRoLnJvdW5kKHZhbCAqIDEwMCkgLyAxMDBcbiAgICAgIH0sXG4gICAgICBncmlkOiB7XG4gICAgICAgIHZlcnRpY2FsTGluZXM6IHRydWUsXG4gICAgICAgIHZlcnRpY2FsTGluZXNOdW1iZXI6IDEsXG4gICAgICAgIGhvcml6b250YWxMaW5lczogdHJ1ZSxcbiAgICAgICAgaG9yaXpvbnRhbExpbmVzTnVtYmVyOiAxXG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgbW91bnRlZCgpIHtcblxuXG4gICAgXG4gICAgdGhpcy4kaHR0cFxuICAgICAgLmdldChcbiAgICAgICAgXCJodHRwczovL2FwaS5jb2luZGVzay5jb20vdjEvYnBpL2hpc3RvcmljYWwvY2xvc2UuanNvbj9zdGFydD0yMDE5LTAxLTAxJmVuZD0yMDE5LTAxLTMxXCJcbiAgICAgIClcbiAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSByZXMuZGF0YS5icGk7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgdGhpcy5kYXRhc2V0LnB1c2goZGF0YVtrZXldKTtcbiAgICAgICAgICB0aGlzLmxhYmVscy54TGFiZWxzLnB1c2gobW9tZW50KGtleSkuZm9ybWF0KFwiTU0vRERcIikpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlKVxuICBcbiAgfSxcbiAgIG1ldGhvZHM6IHtcbiAgICBpbml0UG9wcGVyKCkge1xuICAgICAgY29uc3QgY2hhcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJhbmRvbS1jaGFydFwiKTtcbiAgICAgIGNvbnN0IHJlZiA9IGNoYXJ0LnF1ZXJ5U2VsZWN0b3IoXCIuYWN0aXZlLWxpbmVcIik7XG4gICAgICBjb25zdCB0b29sdGlwID0gdGhpcy4kcmVmcy50b29sdGlwO1xuICAgICAgdGhpcy5wb3BwZXIgPSBuZXcgUG9wcGVyKHJlZiwgdG9vbHRpcCwge1xuICAgICAgICBwbGFjZW1lbnQ6IFwicmlnaHRcIixcbiAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgb2Zmc2V0OiB7IG9mZnNldDogXCIwLDEwXCIgfSxcbiAgICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiBjaGFydFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbk1vdXNlTW92ZShwYXJhbXMpIHtcbiAgICAgIHRoaXMucG9wcGVySXNBY3RpdmUgPSAhIXBhcmFtcztcbiAgICAgIHRoaXMucG9wcGVyLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB0aGlzLnRvb2x0aXBEYXRhID0gcGFyYW1zIHx8IG51bGw7XG4gICAgfVxuICB9XG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuLmJpdGNvaW4tcHJpY2Uge1xuICAudnRjIHtcbiAgICBoZWlnaHQ6IDI1MHB4O1xuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogNjk5cHgpIHtcbiAgICAgIGhlaWdodDogMzUwcHg7XG4gICAgfVxuICB9XG4gIC5ncmlkLFxuICAubGFiZWxzIHtcbiAgICBsaW5lIHtcbiAgICAgIHN0cm9rZTogcmdiYSgjZjY5MTE5LCAwLjUpO1xuICAgIH1cbiAgfVxuICAueC1sYWJlbHMge1xuICAgIC5sYWJlbCB7XG4gICAgICB0ZXh0IHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICAgIGxpbmUge1xuICAgICAgICBvcGFjaXR5OiAwLjM7XG4gICAgICB9XG4gICAgICAmOm50aC1jaGlsZCg2biArIDEpLFxuICAgICAgJjpmaXJzdC1jaGlsZCB7XG4gICAgICAgIHRleHQge1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB9XG4gICAgICAgIGxpbmUge1xuICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLmN1cnZlLWJ0YyB7XG4gICAgLnN0cm9rZSB7XG4gICAgICBzdHJva2U6ICNmNjkxMTk7XG4gICAgICBzdHJva2Utd2lkdGg6IDI7XG4gICAgfVxuICAgIC5maWxsIHtcbiAgICAgIGZpbGw6IHVybCgjYnRjRmlsbCk7XG4gICAgICBmaWxsLW9wYWNpdHk6IDAuNTtcbiAgICB9XG4gIH1cblxuICAgIC50b29sdGlwIHtcbiAgICAmOm5vdCguaXMtYWN0aXZlKSB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgYm94LXNoYWRvdzogMCAwIDVweCByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgJi1kYXRhIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAmLWl0ZW0ge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAmOm5vdCg6Zmlyc3QtY2hpbGQpIHtcbiAgICAgICAgICBtYXJnaW4tbGVmdDogMjBweDtcbiAgICAgICAgfVxuICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICB3aWR0aDogMTVweDtcbiAgICAgICAgICBoZWlnaHQ6IDE1cHg7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgICAgIH1cbiAgICAgICAgJi0tMTpiZWZvcmUge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICNmYmFjOTE7XG4gICAgICAgIH1cbiAgICAgICAgJi0tMjpiZWZvcmUge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICNmYmUxYjY7XG4gICAgICAgIH1cbiAgICAgICAgJi0tMzpiZWZvcmUge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICM3ZmRmZDQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+XG5cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHJlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9kYXNoYm9hcmQvU2FsZXNDaGFydC52dWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///415\n");

/***/ })

})