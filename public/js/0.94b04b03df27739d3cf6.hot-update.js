webpackHotUpdate(0,{

/***/ 225:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_moment__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_moment__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n    data() {\n        return {\n\n            xLabelsData: [],\n            yLabelData: [],\n            yTemp: [],\n            datasets: [{\n                data: [],\n                smooth: true,\n                showPoints: true,\n                fill: true,\n                className: \"curve1\"\n            }],\n            grid: {\n                verticalLines: true,\n                horizontalLines: true\n            },\n            labels: {\n                xLabels: this.xLabelsData,\n                yLabels: 5,\n                yLabelsTextFormatter: val => Math.round(val * 100) / 100\n            },\n            tooltipData: null,\n            popper: null,\n            popperIsActive: false\n        };\n    },\n    mounted() {\n\n        this.initPopper();\n\n        const stat_day = __WEBPACK_IMPORTED_MODULE_0_moment___default()().startOf('month').format('D');\n        const end_day = __WEBPACK_IMPORTED_MODULE_0_moment___default()().endOf('month').format('D');\n\n        const stat_date = __WEBPACK_IMPORTED_MODULE_0_moment___default()().startOf('month').format('YYYY-MM-DD');\n        const end_date = __WEBPACK_IMPORTED_MODULE_0_moment___default()().endOf('month').format('YYYY-MM-DD');\n\n        var i;\n        for (i = stat_day; i <= end_day - 1; i++) {\n            this.xLabelsData.push(i);\n            console.log(i);\n        }\n\n        this.labels.xLabels = this.xLabelsData;\n        this.fetch_data(\"2019-09-01\", '2019-09-30', stat_day, end_day);\n    },\n    methods: {\n        initPopper() {\n            const chart = document.querySelector(\".random-chart\");\n            const ref = chart.querySelector(\".active-line\");\n            const tooltip = this.$refs.tooltip;\n            this.popper = new Popper(ref, tooltip, {\n                placement: \"right\",\n                modifiers: {\n                    offset: {\n                        offset: \"0,10\"\n                    },\n                    preventOverflow: {\n                        boundariesElement: chart\n                    }\n                }\n            });\n        },\n        onMouseMove(params) {\n            this.popperIsActive = !!params;\n            this.popper.scheduleUpdate();\n            this.tooltipData = params || null;\n        },\n\n        fetch_data: function (vfrom, vto, vstart_day, vend_day) {\n            let payload = {\n                from: vfrom,\n                to: vto\n            };\n            axios.post('api/dashboard/purchaseoorderdata', payload).then(response => {\n\n                this.yTemp = response.data;\n                var new_date = __WEBPACK_IMPORTED_MODULE_0_moment___default()(vfrom, \"YYYY-MM-DD\").format('YYYY-MM-DD');\n                var end_date = __WEBPACK_IMPORTED_MODULE_0_moment___default()(vto, \"YYYY-MM-DD\").format('YYYY-MM-DD');\n                var loop_last_date = __WEBPACK_IMPORTED_MODULE_0_moment___default()(vto, \"YYYY-MM-DD\").add(1, 'days').format('YYYY-MM-DD');\n                console.log(new_date);\n                console.log(end_date);\n                console.log(\"Loop Last Date \" + loop_last_date);\n\n                let count = 1;\n\n                while (new_date != loop_last_date) {\n                    console.log(\"New Date \" + new_date);\n                    count = count + 1;\n                    let isFound = false;\n                    this.yTemp.forEach((obj, index) => {\n                        console.log(obj.created);\n                        if (obj['created'] == new_date) {\n                            console.log(\"Date Found \" + new_date);\n                            isFound = true;\n                            this.yLabelData.push(obj.total_sum);\n                        }\n                    });\n\n                    if (isFound == true) {\n                        isFound = false;\n                    } else {\n                        this.yLabelData.push(0);\n                    }\n\n                    console.log(this.yLabelData);\n                    this.new_date = __WEBPACK_IMPORTED_MODULE_0_moment___default()(new_date, \"YYYY-MM-DD\").add(1, 'days').format('YYYY-MM-DD');\n                }\n\n                console.log(\"count = \" + count);\n            }).catch(error => {\n                console.log(error);\n            });\n        }\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///225\n");

/***/ })

})